{"version":3,"sources":["components/components.js","App.js","serviceWorker.js","index.js"],"names":["Header","c","this","props","size","className","text","React","Component","Cards","list","map","data","title","renderTable","Card","projects","App","href","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAIMA,G,6KAEE,IAAIC,EASJ,MARwB,UAApBC,KAAKC,MAAMC,KACXH,EAAI,eACuB,WAApBC,KAAKC,MAAMC,KAClBH,EAAI,gBACuB,UAApBC,KAAKC,MAAMC,OAClBH,EAAI,gBAIJ,uBAAGI,UAAWJ,GAAIC,KAAKC,MAAMG,U,GAZpBC,IAAMC,YAiBrBC,E,4KAEE,OAAOP,KAAKC,MAAMO,KAAKC,KAAI,SAACC,GAAU,IAC1BC,EAAgBD,EAAhBC,MAAOP,EAASM,EAATN,KACf,OACI,6BACI,kBAAC,EAAD,CAAMO,MAAOA,EAAOP,KAAMA,IAC1B,mC,+BAOZ,OACI,6BACKJ,KAAKY,mB,GAhBFP,IAAMC,WAsBpBO,E,uKAEE,OACI,yBAAKV,UAAU,QACX,2BAAIH,KAAKC,MAAMU,OACf,uBAAGR,UAAU,QAAQH,KAAKC,MAAMG,MAFpC,IAE8C,kC,GALvCC,IAAMC,WClCnBQ,EAAW,CACf,CACEH,MAAO,YACPP,KAAM,oFAER,CACEO,MAAO,sBACPP,KAAM,+IAER,CACEO,MAAO,4CACPP,KAAM,qNAER,CACEO,MAAO,uBACPP,KAAM,gHAER,CACEO,MAAO,qBACPP,KAAM,yHA4BKW,MAxBf,WACE,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAQC,KAAK,aAAaF,KAAK,UAC/B,kBAAC,EAAD,CAAQE,KAAK,eAAeF,KAAK,WACjC,6BACA,uBAAGc,KAAK,WAAWb,UAAU,QAA7B,YACA,uBAAGa,KAAK,WAAWb,UAAU,QAA7B,cAEF,yBAAKA,UAAU,UAAUc,GAAG,WAC1B,kBAAC,EAAD,CAAQb,KAAK,WAAWF,KAAK,UAAU,6BACvC,2BAxCS,kEAwCQ,6BACjB,2BAxCS,0FAwCQ,6BACjB,2BAxCS,uGAwCQ,6BACjB,2BAxCS,8EAwCQ,8BAEnB,yBAAKC,UAAU,eAAec,GAAG,WAC/B,kBAAC,EAAD,CAAQb,KAAK,YAAYF,KAAK,UAAU,6BACxC,kBAAC,EAAD,CAAOM,KAAMM,OCvCDI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2bd1fce.chunk.js","sourcesContent":["import React from 'react';\n\nimport './components.css'\n\nclass Header extends React.Component {\n    render() {\n        let c;\n        if (this.props.size === \"large\") {\n            c = \"Header-Large\";\n        } else if (this.props.size === \"medium\") {\n            c = \"Header-Medium\";\n        } else if (this.props.size === \"small\") {\n            c = \"Header-Small\";\n        }\n\n        return (\n            <p className={c}>{this.props.text}</p>\n        );\n    }\n}\n\nclass Cards extends React.Component {\n    renderTable() {\n        return this.props.list.map((data) => {\n            const { title, text } = data;\n            return (\n                <div>\n                    <Card title={title} text={text} />\n                    <br />\n                </div>\n            )\n        });\n    }\n\n    render() {\n        return(\n            <div>\n                {this.renderTable()}\n            </div>\n        );\n    }\n}\n\nclass Card extends React.Component {\n    render() {\n        return (\n            <div className=\"Card\">\n                <p>{this.props.title}</p>\n                <p className=\"Text\">{this.props.text}</p> <br/>\n            </div>\n        );\n    }\n}\n\nexport {\n    Header,\n    Cards,\n};","import React from 'react';\nimport './App.css';\nimport { Header, Cards } from './components/components';\n\nconst aboutme1 = \"Hi! I'm Akay. I'm a computer science student at UMass Amherst.\"\nconst aboutme2 = \"I do a lot things with computers, ranging from web development to reverse engineering.\";\nconst aboutme3 = \"I consider myself a very fast learner with strong interests in operating systems and cybersecurity.\";\nconst aboutme4 = \"When I'm not grinding psets, I'm probably hacking things or playing dota2.\";\n\nconst projects = [\n  {\n    title: \"OSCP Prep\",\n    text: \"Currently studying for the OSCP exam, sponsored by the UMass Cybersecurity Club.\",\n  },\n  {\n    title: \"Security Researcher\",\n    text: \"Ethical hacker making the internet a safer place. Reported vulnerabilities to SoundCloud, KhanAcademy, Granicus and other private programs.\",\n  },\n  {\n    title: \"UMass Cybersecurity Club (2018 - Present)\",\n    text: \"A small club at UMass where a bunch of people into hacking and cybersecurity get together. We do a lot of cool stuff - reverse engineering, CTFs, HackTheBox and cyber competitions such as Mitre eCTF and CCDC. \",\n  },\n  {\n    title: \"ConceptX (2018-2019)\",\n    text: \"An EduTech startup based in Myanmar focused on providing accessible education to students across the county.\"\n  },\n  {\n    title: \"Moth Mobile (2018)\",\n    text: \"Moth meme arduino robot. Robot runs towards the nearest lamp, just like a moth. Won HackUMass VI best robotics hack.\",\n  }\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Main\">\n        <Header text=\"Aung Khant\" size=\"large\" />\n        <Header text=\"Coder/Hacker\" size=\"medium\" />\n        <br />\n        <a href=\"#aboutme\" className=\"Link\">about me</a>\n        <a href=\"#whatido\" className=\"Link\">what i do</a>\n      </div>\n      <div className=\"Section\" id=\"aboutme\">\n        <Header text=\"About me\" size=\"small\" /><br />\n        <p>{aboutme1}</p><br />\n        <p>{aboutme2}</p><br />\n        <p>{aboutme3}</p><br />\n        <p>{aboutme4}</p><br />\n      </div>\n      <div className=\"Section Last\" id=\"whatido\">\n        <Header text=\"What I do\" size=\"small\" /><br />\n        <Cards list={projects} />\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}